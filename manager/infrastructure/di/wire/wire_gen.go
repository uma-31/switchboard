// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/uma-31/switchboard/manager/adapter/http/controller"
	"github.com/uma-31/switchboard/manager/application/usecase"
	"github.com/uma-31/switchboard/manager/infrastructure/http/gin"
	"github.com/uma-31/switchboard/manager/infrastructure/mdns"
	"github.com/uma-31/switchboard/manager/infrastructure/sqlite/gorm"
	"github.com/uma-31/switchboard/manager/infrastructure/wol"
)

// Injectors from gin_server.go:

func InitializeGinServer(port *gin.ServerPort) (*gin.Server, error) {
	sqliteFilePath, err := gorm.NewSqliteFilePath()
	if err != nil {
		return nil, err
	}
	db, err := gorm.NewDB(sqliteFilePath)
	if err != nil {
		return nil, err
	}
	computerRepository := gorm.NewComputerRepository(db)
	getComputersUseCase := usecase.NewGetComputersUseCase(computerRepository)
	saveComputersUseCase := usecase.NewSaveComputersUseCase(computerRepository)
	scanComputerService := mdns.NewScanComputerService()
	scanComputersUseCase := usecase.NewScanComputersUseCase(scanComputerService)
	computersController := controller.NewComputersController(getComputersUseCase, saveComputersUseCase, scanComputersUseCase)
	wakeComputerService := wol.NewWakeComputerService()
	wakeComputerUseCase := usecase.NewWakeComputerUseCase(computerRepository, wakeComputerService)
	computerController := controller.NewComputerController(wakeComputerUseCase)
	router := gin.NewRouter(computersController, computerController)
	server, err := gin.NewServer(router, port)
	if err != nil {
		return nil, err
	}
	return server, nil
}
